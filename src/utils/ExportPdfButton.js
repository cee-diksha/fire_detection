import React from 'react';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

const shipName = "ShipName"; // replace with actual ship name
const currentDate = new Date();
const formattedDate = currentDate.toLocaleString();
const userName = "user"

// download dashboard report
export const ExportPdfButton = ({ data }) => {
  const handleExport = () => {
    const doc = new jsPDF();

    // Title section with ship name, system name, and user
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text(shipName, 10, 10);  // Ship name at the top left
    doc.text("Wireless Fire Detection System", doc.internal.pageSize.getWidth() / 2, 10, { align: "center" });  // System name in the center
    doc.setFontSize(12);
    doc.text(`Report Generated on: ${formattedDate}`, 10, 20);  // Date and time
    doc.text(`Report Generated by: ${userName}`, 10, 30);  // User name


    // Table headers
    const headers = [["S.No", "Device ID", "Deck", "Compartment", "Device Type", "Status/Alert", "Remarks"]];

    // Table rows - filter data where status_log is not empty
    const rows = data
      .filter(item => item.status_log !== "") // Filter rows with non-empty status_log
      .map((item, index) => [
        index + 1, 
        item.node_id, 
        item.deck, 
        item.compartment, 
        item.node_type, 
        item.status_log, // Use status_log instead of status
        "" // Empty remarks field
      ]);

    // Add the table to the PDF with custom row height and column widths
    doc.autoTable({
      head: headers,
      body: rows,
      startY: 40,
      theme: 'grid',
      styles: { 
        halign: 'center', // Horizontal align text to center
        valign: 'middle', // Vertical align text to middle
        lineColor: [0, 0, 0], // Border color
        lineWidth: 0.2, // Border width
        fontSize: 10, // Font size of table
        minCellHeight: 12, // Minimum cell height for rows
      },
      columnStyles: {
        0: { cellWidth: 10 },  // S.No column width
        1: { cellWidth: 18 },  // Device ID column width
        2: { cellWidth: 14 },  // Deck column width
        3: { cellWidth: 28 },  // Compartment column width
        4: { cellWidth: 26 },  // Device Type column width
        5: { cellWidth: 40 },  // Status/Alert column width
        6: { cellWidth: 54 },  // Remarks column width, increased size
      },
      margin: { top: 25 },
    });
    const finalY = doc.autoTable.previous.finalY || 10; // Get the last Y position
    doc.text("Checked by:", 10, finalY + 20);

    // Save the PDF
    doc.save( `${shipName}_${formattedDate}.pdf`);
  };

  return (
    <button onClick={handleExport} style={{width: "140px", cursor: "pointer", borderRadius: "6px", color: "var(--text-color)", backgroundColor: "var(--bg-color-secondary)",border:'none', height: "30px", fontSize: "14px", fontWeight: "500"}}>
      Generate Report
    </button>
  );
};

// download deck report
export const handleDownloadData = (specificDeviceChartData, deviceInfo, deckInfo, deck) => {
    const details = deckInfo.flatMap((item, index) => {
      return deviceInfo.filter(
        data => data.deck === parseInt(deck) && data.compartment === item.comp && !data.status.includes("success")
      );
    });
  
    const data = details.map(data => {
      return specificDeviceChartData.filter(item => item.node_name === data.node_name);
    }).flat(); 
  
    const doc = new jsPDF();

       // Title section with ship name, system name, and user
       doc.setFontSize(14);
       doc.setFont('helvetica', 'bold');
       doc.text(shipName, 10, 10);  // Ship name at the top left
       doc.text("Wireless Fire Detection System", doc.internal.pageSize.getWidth() / 2, 10, { align: "center" });  // System name in the center
       doc.setFontSize(12);
       doc.text(`Report Generated on: ${formattedDate}`, 10, 20);  // Date and time
       doc.text(`Report Generated by: ${userName}`, 10, 30);  // User name
  
    // Create a table to store all devices
    const tableRows = [];
    
    // Loop through each device and prepare the data for the table
    data.forEach((device, idx) => {
      const tempAlerts = device.alertlogstemp && device.alertlogstemp.length > 0 
        ? device.alertlogstemp.map(log => `${log.time}: ${log.message}`).join("\n") 
        : "Fine";
      
      const batteryAlerts = device.alertlogsbattery && device.alertlogsbattery.length > 0 
        ? device.alertlogsbattery.map(log => `${log.time}: ${log.message}`).join("\n") 
        : "Fine";
  
      tableRows.push([
        idx + 1, // S.No.
        device.comp || "N/A", // Compartment
        device.node_name || "N/A", // Device Name
        tempAlerts, // Temperature Alerts
        batteryAlerts // Battery Alerts
      ]);
    });
  
    // Add Deck heading
    doc.setFont('helvetica', 'normal');
    doc.text(`Deck - ${deck}`, 10, 40); // Title for deck number
  
    // Add the table
    doc.autoTable({
      startY: 50,
      head: [['S.No', 'Comp', 'Device Name', 'Temp Alerts', 'Battery Alerts']], // Table header
      body: tableRows,
      styles: { 
        halign: 'center', // Horizontal alignment for content
        cellPadding: 5,  // Increase cell padding for more space
        minCellHeight: 10, // Row height
      },
      columnStyles: {
        0: { cellWidth: 20 },  // S.No. column width
        1: { cellWidth: 25 },  // Compartment column width
        2: { cellWidth: 40 },  // Device Name column width
        3: { cellWidth: 50, halign: 'left' },  // Temperature Alerts column width
        4: { cellWidth: 50, halign: 'left'  },  // Battery Alerts column width
        margin: { top: 40 },
      },
    });

    const finalY = doc.autoTable.previous.finalY || 10; // Get the last Y position
    doc.text("Checked by:", 10, finalY + 20);
  
    // Save the PDF file
    doc.save( `${shipName}_${formattedDate}.pdf`);
  };


  export const downloadSpecificReport = (deviceData) => {
    const doc = new jsPDF();
  
    // Title section with ship name, system name, and user
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text(shipName, 10, 10);  // Ship name at the top left
    doc.text("Wireless Fire Detection System", doc.internal.pageSize.getWidth() / 2, 10, { align: "center" });  // System name in the center
    doc.setFontSize(12);
    doc.text(`Report Generated on: ${formattedDate}`, 10, 20);  // Date and time
    doc.text(`Report Generated by: ${userName}`, 10, 30);  // User name
  
    // Add Device Location, Deck, and Compartment in the same line
    doc.setFont('helvetica', 'normal');
    doc.text(`Device Location: ${deviceData.node_name}, Deck: ${deviceData.deck}, Compartment: ${deviceData.comp}`, 10, 40);
  
    // Prepare data for the table
    const tableRows = [];
    
    // Process Temperature Alerts
    const tempAlerts = deviceData.alertlogstemp 
      ? deviceData.alertlogstemp.map(log => `${log.time}: ${log.message}`).join("\n")
      : "No temperature alerts";
  
    // Process Battery Alerts
    const batteryAlerts = deviceData.alertlogsbattery 
      ? deviceData.alertlogsbattery.map(log => `${log.time}: ${log.message}`).join("\n")
      : "No battery alerts";
  
    // Add row to table with device information
    tableRows.push([
      1,  // S.No.
      deviceData.node_id,
      deviceData.node_type,
      tempAlerts,  
      batteryAlerts,
    ]);
  
    // Add table headers
    doc.autoTable({
      startY: 60,  // Start table after the header texts
      head: [['S.No', 'Device ID', 'Device Type', 'Temp Alerts', 'Battery Alerts']],
      body: tableRows,
      styles: {
        cellPadding: 5,  // Padding for cells
        minCellHeight: 10,  // Adjust row height for better readability
      },
      columnStyles: {
        0: { cellWidth: 15 },  // S.No.
        1: { cellWidth: 25 },  // Node ID
        2: { cellWidth: 35 },  // Node Type
        3: { cellWidth: 60, halign: 'left' },  // Temp Alerts with left alignment
        4: { cellWidth: 60, halign: 'left' },  // Battery Alerts with left alignment
        margin: { top: 40 },
      },
    });

    const finalY = doc.autoTable.previous.finalY || 10; // Get the last Y position
    doc.text("Checked by:", 10, finalY + 20);
  
    // Save the PDF file
    doc.save(`${shipName}_${formattedDate}.pdf`);
  };
  